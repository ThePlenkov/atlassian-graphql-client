/**
 * Example of using gqlb with full TypeScript type safety
 * 
 * This demonstrates how to use the typed builder for full autocomplete
 */

import { createQueryBuilder } from '../src/index.js';
import { buildSchema } from 'graphql';
import type { TypedQueryBuilder, FieldFn } from '../src/typed-builder.js';

// Example GraphQL schema
const schemaSDL = `
  type Query {
    user(id: ID!): User
    users(first: Int, after: String): [User!]!
  }

  type User {
    id: ID!
    name: String!
    email: String
    posts(first: Int): [Post!]!
  }

  type Post {
    id: ID!
    title: String!
    content: String!
    author: User!
  }
`;

const schema = buildSchema(schemaSDL);

// Define TypeScript types matching the schema
// (In production, these would be generated by gqlb-codegen)

interface Query {
  user: FieldFn<User, { id: string }, true>;
  users: FieldFn<User[], { first?: number; after?: string }, false>;
}

interface User {
  id: FieldFn<string, never, false>;
  name: FieldFn<string, never, false>;
  email: FieldFn<string | null, never, false>;
  posts: FieldFn<Post[], { first?: number }, false>;
}

interface Post {
  id: FieldFn<string, never, false>;
  title: FieldFn<string, never, false>;
  content: FieldFn<string, never, false>;
  author: FieldFn<User, never, false>;
}

// Create typed query builder
const builder = createQueryBuilder(schema) as TypedQueryBuilder<Query>;

// Example 1: Simple query with full autocomplete
const simpleQuery = builder.query(q => [
  q.user({ id: '123' }, user => [
    user.id,
    user.name,
    user.email
  ])
]);

// Result type is inferred as:
// {
 //   user: {
//     id: string;
//     name: string;
//     email: string | null;
//   }
// }

// Example 2: Nested query with full autocomplete
const nestedQuery = builder.query(q => [
  q.user({ id: '123' }, user => [
    user.id,
    user.name,
    user.posts({ first: 10 }, post => [
      post.title,
      post.content,
      post.author(author => [
        author.name
      ])
    ])
  ])
]);

// Result type is inferred as:
// {
//   user: {
//     id: string;
//     name: string;
//     posts: {
//       title: string;
//       content: string;
//       author: {
//         name: string;
//       }
//     }[];
//   }
// }

// Example 3: Multiple root fields
const multiQuery = builder.query('GetUsersAndUser', q => [
  q.user({ id: '123' }, user => [
    user.name
  ]),
  q.users({ first: 10 }, user => [
    user.id,
    user.name
  ])
]);

// Result type is inferred as:
// {
//   user: {
//     name: string;
//   };
//   users: {
//     id: string;
//     name: string;
//   }[];
// }

console.log('âœ… Type-safe queries built successfully!');
console.log('\nSimple query:', simpleQuery.loc?.source.body);
console.log('\nNested query:', nestedQuery.loc?.source.body);
console.log('\nMulti query:', multiQuery.loc?.source.body);



